"""empty message

Revision ID: 6f7eb840d56a
Revises: 44e4ef3e738c
Create Date: 2020-10-08 17:37:23.681030

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from application.models import *
from application.tracker.models import *

import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = '6f7eb840d56a'
down_revision = '44e4ef3e738c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_log',
    sa.Column('level', sqlalchemy_utils.types.choice.ChoiceType([('0', 'DEBUG'), ('1', 'INFO'), ('2', 'WARN'), ('3', 'ERROR'), ('4', 'FATAL')]), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('module', sa.String(), nullable=True),
    sa.Column('worker', sa.String(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('run_on_startup', sa.Boolean(), nullable=False),
    sa.Column('interval', sa.Integer(), nullable=True),
    sa.Column('last_run', sa.DateTime(), nullable=True),
    sa.Column('last_failed', sa.DateTime(), nullable=True),
    sa.Column('db_created_at', sa.DateTime(), nullable=True),
    sa.Column('db_updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('task_run',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('state', sqlalchemy_utils.types.choice.ChoiceType([('0', 'PENDING'), ('1', 'RUNNING'), ('2', 'COMPLETED'), ('3', 'FAILED'), ('4', 'REJECTED')]), nullable=False),
    sa.Column('periodic', sa.Boolean(), nullable=True),
    sa.Column('args', sa.String(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('execution_time', sa.Integer(), nullable=True),
    sa.Column('db_created_at', sa.DateTime(), nullable=True),
    sa.Column('db_updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_run_task_id'), 'task_run', ['task_id'], unique=False)
    op.create_table('task_log',
    sa.Column('level', sqlalchemy_utils.types.choice.ChoiceType([('0', 'DEBUG'), ('1', 'INFO'), ('2', 'WARN'), ('3', 'ERROR'), ('4', 'FATAL')]), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('module', sa.String(), nullable=True),
    sa.Column('worker', sa.String(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('task_run_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['task_run_id'], ['task_run.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_log_task_id'), 'task_log', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_log_task_run_id'), 'task_log', ['task_run_id'], unique=False)
    op.add_column('petition', sa.Column('geo_polled_at', sa.DateTime(), nullable=True))
    op.add_column('record', sa.Column('geographic', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('record', 'geographic')
    op.drop_column('petition', 'geo_polled_at')
    op.drop_index(op.f('ix_task_log_task_run_id'), table_name='task_log')
    op.drop_index(op.f('ix_task_log_task_id'), table_name='task_log')
    op.drop_table('task_log')
    op.drop_index(op.f('ix_task_run_task_id'), table_name='task_run')
    op.drop_table('task_run')
    op.drop_table('task')
    op.drop_table('app_log')
    # ### end Alembic commands ###
